export function buildSystemPrompt(profile: Record<string, unknown>): string {
  const lines: string[] = []

  const get = (key: string): string | undefined => {
    const val = profile[key]
    return typeof val === 'string' ? val : undefined
  }

  const getArray = (key: string): string[] => {
    const val = profile[key]
    return Array.isArray(val) ? val.filter(v => typeof v === 'string') : []
  }

  const getObject = (key: string): Record<string, string> => {
    const val = profile[key]
    return typeof val === 'object' && val !== null && !Array.isArray(val)
      ? (val as Record<string, string>)
      : {}
  }

  lines.push(`Te ${get('name') || 'Reflecta-profil'} vagy.`)
  if (get('archetype')) lines.push(get('archetype')!)
  if (get('domain')) lines.push(`üîπ Ter√ºleted: ${get('domain')}`)
  if (get('worldview')) lines.push(`üîπ Vil√°gk√©ped: ${get('worldview')}`)

  const tone = getObject('tone_style')
  if (Object.keys(tone).length > 0) {
    lines.push(`\nüó£Ô∏è Hangnem √©s st√≠lus:`)
    lines.push(...Object.entries(tone).map(([k, v]) => `‚Ä¢ ${k}: ${v}`))
  }

  const questions = getArray('question_logic')
  if (questions.length) {
    lines.push(`\n‚ùì K√©rd√©slogik√°d:`)
    lines.push(...questions.map(q => `‚Ä¢ ${q}`))
  }

  const ideal = getArray('ideal_usage')
  if (ideal.length) {
    lines.push(`\n‚úÖ Sz√°modra ide√°lis helyzetek:`)
    lines.push(...ideal.map(i => `‚Ä¢ ${i}`))
  }

  if (get('not_suitable_for')) {
    lines.push(`\nüö´ Nem alkalmas vagy ezekre:`)
    lines.push(`‚Ä¢ ${get('not_suitable_for')}`)
  }

  const common = getArray('reactions_common')
  if (common.length) {
    lines.push(`\nü§≤ √Åltal√°nos reakci√≥id:`)
    lines.push(...common.map(r => `‚Ä¢ ${r}`))
  }

  const rare = getArray('reactions_rare')
  if (rare.length) {
    lines.push(`\nüåë Ritka, k√ºl√∂nleges reakci√≥id:`)
    lines.push(...rare.map(r => `‚Ä¢ ${r}`))
  }

  const highlights = getArray('highlight_keywords')
  if (highlights.length) {
    lines.push(`\nüß© Kiemelt kulcskifejez√©sek, amelyekre k√ºl√∂n√∂sen √©rz√©keny vagy:`)
    lines.push(...highlights.map(k => `‚Ä¢ ${k}`))
  }

  if (get('recommendation_logic')) {
    lines.push(`\nüìö Aj√°nl√°si m≈±k√∂d√©sed:`)
    lines.push(`‚Ä¢ ${get('recommendation_logic')}`)
  }

  if (get('closing_trigger') || get('closing_style') || get('closing_note')) {
    lines.push(`\nüïäÔ∏è Lez√°r√°sodra jellemz≈ë:`)
    if (get('closing_trigger')) lines.push(`‚Ä¢ Lez√°r√°s indoka: ${get('closing_trigger')}`)
    if (get('closing_style')) lines.push(`‚Ä¢ St√≠lus: ${get('closing_style')}`)
    if (get('closing_note')) lines.push(`‚Ä¢ Z√°r√≥mondat: ${get('closing_note')}`)
  }

  lines.push(`\nüî∏ A bevezet≈ë szakasz sor√°n a felhaszn√°l√≥ v√°laszform√°j√°ra, szimbolikus st√≠luspreferenci√°j√°ra, ir√°ny√≠t√°si ig√©ny√©re √©s motiv√°ci√≥j√°ra is figyelsz. Ezekre reflekt√°lhatsz k√©s≈ëbb.`)

  lines.push(`\n‚ùó Fontos: Soha nem adsz tan√°csot. Nem elemzel. Nem d√∂ntesz a felhaszn√°l√≥ helyett.`)

  return lines.join('\n').trim()
}
